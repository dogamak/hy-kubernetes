name: Release project (Exercise 3.03)

on:
  push:
    paths:
      - 'exercise_3.03/**'
      - '.github/workflows/exercise_3_03.yaml'

env:
  EXERCISE: "exercise_3.03"
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: hy-kube-cluster
  GKE_ZONE: europe-north1-b
  FRONTEND_IMAGE: hy-kubernetes-todo-app-frontend
  BACKEND_IMAGE: hy-kubernetes-todo-app-backend
  DAILY_TODO_JOB_IMAGE: hy-kubernetes-todo-app-daily-todo-job

jobs:
  setup-build-publish-frontend:
    name: Setup, Build and Publish Frontend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: "./${{ env.EXERCISE }}/frontend"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - run: gcloud --quiet auth configure-docker gcr.io

      - uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true

      - name: Build Frontend
        run: docker build --tag "gcr.io/${{ steps.auth.project_id }}/$FRONTEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" .

      - name: Publish Frontend
        run: docker push "gcr.io/${{ steps.auth.project_id }}/$FRONTEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"

  setup-build-publish-backend:
    name: Setup, Build and Publish Backend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: "./${{ env.EXERCISE }}/backend"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'


      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - run: gcloud --quiet auth configure-docker gcr.io

      - uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Build Backend
        run: docker build --tag "gcr.io/${{ steps.auth.project_id }}/$BACKEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" --target todo-app .

      - name: Build Daily Todo Job
        run: docker build --tag "gcr.io/${{ steps.auth.project_id }}/$DAILY_TODO_JOB_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" --target daily-todo-job .

      - name: Publish Backend
        run: docker push "gcr.io/${{ steps.auth.project_id }}/$BACKEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"

      - name: Publish Daily Todo Job
        run: docker push "gcr.io/${{ steps.auth.project_id }}/$DAILY_TODO_JOB_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"

  deploy:
    name: Deploy Frontend & Backend
    runs-on: ubuntu-latest

    needs:
      - setup-build-publish-backend
      - setup-build-publish-frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - run: gcloud --quiet auth configure-docker gcr.io
      - run: gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Deploy
        run: |-
          kustomize edit set image "todo-app/frontend=gcr.io/${{ steps.auth.project_id }}/$FRONTEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
          kustomize edit set image "todo-app/backend=gcr.io/${{ steps.auth.project_id }}/$BACKEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
          kustomize edit set image "todo-app/daily-todo-job=gcr.io/${{ steps.auth.project_id }}/$DAILY_TODO_JOB_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
          kustomize build frontend/manifests manifests | kubectl apply -f -
          kubectl rollout status deployment $FRONTEND_IMAGE
          kubectl get services -o wide
